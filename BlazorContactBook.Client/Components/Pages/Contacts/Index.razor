@page "/contacts"
@using BlazorContactBook.Client.Components.UI.Contacts
@using BlazorContactBook.Client.Helpers

@attribute [Authorize]

@rendermode InteractiveServer

@inject IContactDTOService ContactService

<PageTitle>ContactBook | Contacts</PageTitle>

<div class="d-flex align-items-center mt-3">

    <h1>All Contacts</h1>

    <a href="contacts/create" class="ms-auto btn btn-primary rounded-pill">New Contact</a>


</div>

<div class="row g-3">

    <div class="col-12 col-lg-4">

        <div class="sideNav mb-3">

            <form>

                <div class="input-group">

                    <input type="text" class="form-control" placeholder="Search" />

                    <button class="btn btn-primary">Search</button>

                </div>

            </form>

            <div class="mt-5">

                <label class="form-label">Category Filter</label>

                <select class="form-select">

                    <option value="">All Contacts</option>

                </select>

            </div>

        </div>

    </div>

    <div class="col-12 col-lg-8">

        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-1 g-3">

            @if (contacts.Any())
            {
                @foreach (ContactDTO contact in contacts)
                {
                    <div class="col" @key="contact.Id">

                        <ContactCard Contact="contact" OnContactDelete="DeleteContact" />

                    </div>
                }
            }
            else
            {
                <div class="text-center sideNav">

                    <h4>No contacts found!</h4>

                    <p>
                        Why don't you <a href="contacts/create">create some</a>?
                    </p>

                </div>
            }

        </div>

    </div>

</div>

@code {
    #region parameters

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }


    #endregion


    #region state

    private IEnumerable<ContactDTO> contacts = [];

    private UserInfo? userInfo;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        contacts = await ContactService.GetContactsAsync(userInfo!.UserId);
    }

    private async Task DeleteContact(int contactId)
    {
        try
        {

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    #endregion

}
